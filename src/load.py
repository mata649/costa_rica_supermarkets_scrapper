from asyncio.log import logger
import os
from sqlalchemy import create_engine
import pandas as pd
from src.cfg import DB_CONNSTR, PRODUCT_PRICE_TIMELAPSE_TABLE_NAME

engine = create_engine(DB_CONNSTR)


class SupermarketLoader:

    def __init__(self, file_paths: dict) -> None:
        """ Object used to save the information in the database
            based in a dictionary with the file paths to the csv.
        Args:
            file_paths (dict): dictionary with table_name as key and file_path as value.
        """
        self.file_paths = file_paths

    def load_with_repeated_items(self, table_name):
        """
        Saves the data frame information in the database, no matter if
        the data is repeated. 
        --------------------------------------------------------------
        This is useful for tables with the id autogenerated.
        --------------------------------------------------------------
        Args:
            table_name (str): table name to search in the file paths.
        """
        data_frame = pd.read_csv(self.file_paths[table_name])
        data_frame.to_sql(name=table_name, con=engine,
                         if_exists='append', index=False)

    def load_with_not_repeated_items(self, table_name:str):
        """
        Saves the data frame information in the database, first loading 
        the information in a temporary table and then checking the information 
        that already exists in the database to avoid having duplicate data.
        --------------------------------------------------------------------
        This is useful for tables with id based in another field.
        --------------------------------------------------------------------
        Args:
            table_name (str): table name to search in the file paths.
        """
        data_frame = pd.read_csv(self.file_paths[table_name])
        data_frame.to_sql(name='temp_table', con=engine,
                         if_exists='replace', index=False)
        columns_name = list(data_frame.columns.values)
        cols_to_insert = ','.join(columns_name)
        cols_to_select = ','.join(
            list(map(lambda col: 't.'+col, columns_name)))
        with engine.begin() as cn:
            sql = f'INSERT INTO {table_name}({cols_to_insert}) SELECT {cols_to_select} FROM temp_table as t WHERE NOT EXISTS(SELECT f.id FROM {table_name} as f WHERE f.id = CAST(t.id as varchar(8)))'
            cn.execute(sql)

    def delete_csv(self):
        """
        Deletes the csv based in the file paths. 
        """
        for file_path in self.file_paths.values():
            os.remove(file_path)

    def drop_temp_table(self):
        """
        Drop the temporal table.
        """
        with engine.begin() as cn:
            sql = f'DROP TABLE temp_table'
            cn.execute(sql)

    def load(self):
        """
        Saves the information in the database using the csv in the 
        in the file paths.
        """
        logger.info('Starting loading process')
        for table_name in self.file_paths.keys():
            if table_name == PRODUCT_PRICE_TIMELAPSE_TABLE_NAME:
                self.load_with_repeated_items(table_name)
            else:
                self.load_with_not_repeated_items(table_name)
        self.delete_csv()
        self.drop_temp_table()
